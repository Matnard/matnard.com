{"version":3,"sources":["../node_modules/victor/index.js","euler-integrated-object/euler-integrated-object.js","mouse-position-time-differencial/mouse-position-time-differencial.js","floor.js","sombrero.js"],"names":["EulerIntegratedObject","position","Victor","maxForce","maxSpeed","velocity","acceleration","add","lengthSq","normalize","multiply","force","target","desired","subtract","steer","applyForce","distance","d","magnitude","arriveSpeed","MousePositionTimeDifferencial","el","global","limit","bounds","width","innerWidth","height","innerHeight","center","divide","mouseForce","addEventListener","onMove","bind","seekWithArrivalBehavior","e","mouse","x","y","getFloor","vertexShader","fragmentShader","params","customUniforms","time","value","noised","waveAmplitude","noiseAmplitude","timeScale","waveAmplitudeScale","clock","THREE","Clock","material","ShaderMaterial","uniforms","wireframe","transparent","geometry","PlaneBufferGeometry","floor","Mesh","rotation","Math","PI","set","requestAnimationFrame","updateFloor","getElapsedTime","Background","canvas","document","createElement","body","prepend","style","top","left","zIndex","componentDidMount","WIDTH","HEIGHT","renderer","WebGLRenderer","antialias","alpha","progress","bars","scale","setPixelRatio","devidePixelRatio","setSize","camera","PerspectiveCamera","pointLight","PointLight","scene","Scene","mouseDiff","background","setClearColor","domElement","visibility","onload","onWindowResize","update","abs","render","onEnterFrame","console","log","ev","preventDefault","aspect","updateProjectionMatrix","optimizedResize","callbacks","running","resize","runCallbacks","setTimeout","forEach","callback","length","addCallback","push","bg"],"mappings":";AAkBA,SAAA,EAAA,EAAA,GACA,KAAA,gBAAA,GACA,OAAA,IAAA,EAAA,EAAA,GAcA,KAAA,EAAA,GAAA,EAaA,KAAA,EAAA,GAAA,EA/CA,QAAA,OAAA,QAAA,EAoEA,EAAA,UAAA,SAAA,GACA,OAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAiBA,EAAA,WAAA,SAAA,GACA,OAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,IAwBA,EAAA,UAAA,KAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,KAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,IAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,MAiBA,EAAA,UAAA,UAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,MAiBA,EAAA,UAAA,WAAA,SAAA,GAEA,OADA,KAAA,GAAA,EACA,MAiBA,EAAA,UAAA,WAAA,SAAA,GAEA,OADA,KAAA,GAAA,EACA,MAkBA,EAAA,UAAA,UAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,UAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,SAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,MAiBA,EAAA,UAAA,eAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,MAiBA,EAAA,UAAA,gBAAA,SAAA,GAEA,OADA,KAAA,GAAA,EACA,MAiBA,EAAA,UAAA,gBAAA,SAAA,GAEA,OADA,KAAA,GAAA,EACA,MAkBA,EAAA,UAAA,QAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,QAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,OAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,MAiBA,EAAA,UAAA,aAAA,SAAA,GASA,OARA,IAAA,GACA,KAAA,GAAA,EACA,KAAA,GAAA,IAEA,KAAA,EAAA,EACA,KAAA,EAAA,GAGA,MAiBA,EAAA,UAAA,cAAA,SAAA,GAMA,OALA,IAAA,EACA,KAAA,GAAA,EAEA,KAAA,EAAA,EAEA,MAiBA,EAAA,UAAA,cAAA,SAAA,GAMA,OALA,IAAA,EACA,KAAA,GAAA,EAEA,KAAA,EAAA,EAEA,MAgBA,EAAA,UAAA,QAAA,WAEA,OADA,KAAA,IAAA,EACA,MAgBA,EAAA,UAAA,QAAA,WAEA,OADA,KAAA,IAAA,EACA,MAgBA,EAAA,UAAA,OAAA,WAGA,OAFA,KAAA,UACA,KAAA,UACA,MAkBA,EAAA,UAAA,UAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,UAAA,SAAA,GAEA,OADA,KAAA,GAAA,EAAA,EACA,MAkBA,EAAA,UAAA,SAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,MAiBA,EAAA,UAAA,eAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,MAiBA,EAAA,UAAA,gBAAA,SAAA,GAEA,OADA,KAAA,GAAA,EACA,MAiBA,EAAA,UAAA,gBAAA,SAAA,GAEA,OADA,KAAA,GAAA,EACA,MASA,EAAA,UAAA,UAAA,WACA,IAAA,EAAA,KAAA,SAQA,OANA,IAAA,GACA,KAAA,EAAA,EACA,KAAA,EAAA,GAEA,KAAA,OAAA,EAAA,EAAA,IAEA,MAGA,EAAA,UAAA,KAAA,EAAA,UAAA,UAiBA,EAAA,UAAA,MAAA,SAAA,EAAA,GAGA,OAFA,KAAA,IAAA,KAAA,GAAA,IAAA,KAAA,GAAA,GACA,KAAA,IAAA,KAAA,GAAA,IAAA,KAAA,GAAA,GACA,MAkBA,EAAA,UAAA,UAAA,SAAA,EAAA,GAIA,OAHA,KAAA,WAAA,EAAA,GACA,KAAA,WAAA,EAAA,GAEA,MAkBA,EAAA,UAAA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAEA,OADA,KAAA,EAAA,EAAA,EAAA,GACA,MAkBA,EAAA,UAAA,WAAA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAEA,OADA,KAAA,EAAA,EAAA,EAAA,GACA,MAkBA,EAAA,UAAA,aAAA,SAAA,EAAA,GAMA,OALA,KAAA,MAAA,KAAA,UACA,KAAA,WAAA,EAAA,GAEA,KAAA,WAAA,EAAA,GAEA,MAgBA,EAAA,UAAA,QAAA,WAGA,OAFA,KAAA,EAAA,KAAA,MAAA,KAAA,GACA,KAAA,EAAA,KAAA,MAAA,KAAA,GACA,MAiBA,EAAA,UAAA,QAAA,SAAA,GAIA,YAHA,IAAA,IAAA,EAAA,GACA,KAAA,EAAA,KAAA,EAAA,QAAA,GACA,KAAA,EAAA,KAAA,EAAA,QAAA,GACA,MAmBA,EAAA,UAAA,KAAA,SAAA,EAAA,GAMA,YALA,IAAA,IACA,EAAA,IAGA,KAAA,GAAA,EAAA,GAAA,KAAA,EAAA,EAAA,EAAA,EACA,MAmBA,EAAA,UAAA,KAAA,SAAA,EAAA,GAMA,YALA,IAAA,IACA,EAAA,IAGA,KAAA,GAAA,EAAA,GAAA,KAAA,EAAA,EAAA,EAAA,EACA,MAmBA,EAAA,UAAA,IAAA,SAAA,EAAA,GAGA,OAFA,KAAA,KAAA,EAAA,GACA,KAAA,KAAA,EAAA,GACA,MAoBA,EAAA,UAAA,MAAA,WACA,OAAA,IAAA,EAAA,KAAA,EAAA,KAAA,IAiBA,EAAA,UAAA,MAAA,SAAA,GAEA,OADA,KAAA,EAAA,EAAA,EACA,MAiBA,EAAA,UAAA,MAAA,SAAA,GAEA,OADA,KAAA,EAAA,EAAA,EACA,MAiBA,EAAA,UAAA,KAAA,SAAA,GAGA,OAFA,KAAA,MAAA,GACA,KAAA,MAAA,GACA,MAeA,EAAA,UAAA,KAAA,WAEA,OADA,KAAA,EAAA,KAAA,EAAA,EACA,MAiBA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAGA,EAAA,UAAA,MAAA,SAAA,GACA,OAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,GAkBA,EAAA,UAAA,YAAA,SAAA,GACA,IAAA,GAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAGA,OAFA,KAAA,EAAA,EAAA,EAAA,EACA,KAAA,EAAA,EAAA,EAAA,EACA,MAIA,EAAA,UAAA,gBAAA,WACA,OAAA,KAAA,MAAA,KAAA,EAAA,KAAA,IAGA,EAAA,UAAA,mBAAA,WACA,OAAA,EAAA,KAAA,oBAGA,EAAA,UAAA,cAAA,WACA,OAAA,KAAA,MAAA,KAAA,EAAA,KAAA,IAGA,EAAA,UAAA,iBAAA,WACA,OAAA,EAAA,KAAA,kBAGA,EAAA,UAAA,MAAA,EAAA,UAAA,gBACA,EAAA,UAAA,SAAA,EAAA,UAAA,mBACA,EAAA,UAAA,UAAA,EAAA,UAAA,gBAEA,EAAA,UAAA,OAAA,SAAA,GACA,IAAA,EAAA,KAAA,EAAA,KAAA,IAAA,GAAA,KAAA,EAAA,KAAA,IAAA,GACA,EAAA,KAAA,EAAA,KAAA,IAAA,GAAA,KAAA,EAAA,KAAA,IAAA,GAKA,OAHA,KAAA,EAAA,EACA,KAAA,EAAA,EAEA,MAGA,EAAA,UAAA,UAAA,SAAA,GAEA,OADA,EAAA,EAAA,GACA,KAAA,OAAA,IAGA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,KAAA,OAAA,EAAA,KAAA,UAGA,EAAA,UAAA,YAAA,SAAA,GAEA,OADA,EAAA,EAAA,GACA,KAAA,SAAA,IAGA,EAAA,UAAA,SAAA,SAAA,GACA,IAAA,EAAA,KAAA,QAAA,EAEA,OAAA,KAAA,OAAA,IAGA,EAAA,UAAA,YAAA,SAAA,GAEA,OADA,EAAA,EAAA,GACA,KAAA,SAAA,IAiBA,EAAA,UAAA,UAAA,SAAA,GACA,OAAA,KAAA,EAAA,EAAA,GAiBA,EAAA,UAAA,aAAA,SAAA,GACA,OAAA,KAAA,IAAA,KAAA,UAAA,KAiBA,EAAA,UAAA,UAAA,SAAA,GACA,OAAA,KAAA,EAAA,EAAA,GAiBA,EAAA,UAAA,aAAA,SAAA,GACA,OAAA,KAAA,IAAA,KAAA,UAAA,KAiBA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,KAAA,KAAA,KAAA,WAAA,KAiBA,EAAA,UAAA,WAAA,SAAA,GACA,IAAA,EAAA,KAAA,UAAA,GACA,EAAA,KAAA,UAAA,GAEA,OAAA,EAAA,EAAA,EAAA,GAeA,EAAA,UAAA,OAAA,WACA,OAAA,KAAA,KAAA,KAAA,aAeA,EAAA,UAAA,SAAA,WACA,OAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,GAGA,EAAA,UAAA,UAAA,EAAA,UAAA,OAcA,EAAA,UAAA,OAAA,WACA,OAAA,IAAA,KAAA,GAAA,IAAA,KAAA,GAgBA,EAAA,UAAA,UAAA,SAAA,GACA,OAAA,KAAA,IAAA,EAAA,GAAA,KAAA,IAAA,EAAA,GAmBA,EAAA,UAAA,SAAA,WACA,MAAA,KAAA,KAAA,EAAA,OAAA,KAAA,GAeA,EAAA,UAAA,QAAA,WACA,MAAA,CAAA,KAAA,EAAA,KAAA,IAeA,EAAA,UAAA,SAAA,WACA,MAAA,CAAA,EAAA,KAAA,EAAA,EAAA,KAAA,IAIA,IAAA,EAAA,IAAA,KAAA,GAEA,SAAA,EAAA,EAAA,GACA,OAAA,KAAA,MAAA,KAAA,UAAA,EAAA,EAAA,GAAA,GAGA,SAAA,EAAA,GACA,OAAA,EAAA,EAGA,SAAA,EAAA,GACA,OAAA,EAAA;;ACzuCeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAjEf,IAAA,EAAA,EAAA,QAAA,WAiEeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EA/DTA,IAAAA,EA+DSA,WA9DyD,SAAA,IAA3DC,IAAAA,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IAAIC,EAAJ,QAAW,EAAE,GAAIC,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IAAMC,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAG,EAAA,KAAA,GACjEH,KAAAA,SAAWA,EACXI,KAAAA,SAAW,IAAIH,EAAJ,QAAW,EAAG,GACzBI,KAAAA,aAAe,IAAIJ,EAAJ,QAAW,EAAG,GAC7BC,KAAAA,SAAWA,EACXC,KAAAA,SAAWA,EAyDHJ,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAtDL,MAAA,WACHK,KAAAA,SAASE,IAAI,KAAKD,cAEpB,KAAKD,SAASG,WAAa,KAAKJ,SAAW,KAAKA,UAC7CC,KAAAA,SAASI,YAAYC,SAAS,IAAIR,EAAJ,QAAW,KAAKE,SAAU,KAAKA,WAG9DH,KAAAA,SAASM,IAAI,KAAKF,UAClBC,KAAAA,aAAaI,SAAS,IAAIR,EAAJ,QAAW,EAAG,MA8C5BF,CAAAA,IAAAA,aA3CHW,MAAAA,SAAAA,GACLL,KAAAA,aAAaC,IAAII,KA0CTX,CAAAA,IAAAA,OAvCTY,MAAAA,SAAAA,GACAC,IAAAA,EAAUD,EAAOE,SAAS,KAAKb,UACnCY,EAAQJ,YACRI,EAAQH,SAAS,IAAIR,EAAJ,QAAW,KAAKE,SAAU,KAAKA,WAC5CW,IAAAA,EAAQF,EAAQC,SAAS,KAAKT,UAE/BU,EAAMP,WAAa,KAAKL,SAAW,KAAKA,UAC1CY,EAAMN,YAAYC,SAAS,IAAIR,EAAJ,QAAW,KAAKC,SAAU,KAAKA,WAGtDa,KAAAA,WAAWD,KA6BHf,CAAAA,IAAAA,0BA1BUY,MAAAA,SAAAA,GAAQK,IAC3BF,EAD2BE,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IAEtCJ,EAAUD,EAAOE,SAAS,KAAKb,UAC/BiB,EAAIL,EAAQM,YAIZD,GAFJL,EAAQJ,YAEJS,EAAID,EAAU,CAEbG,IAAAA,EAAe,KAAKhB,SAASa,EAAYC,EAC7CL,EAAQH,SAAS,IAAIR,EAAJ,QAAWkB,EAAaA,SAEzCP,EAAQH,SAAS,IAAIR,EAAJ,QAAW,KAAKE,SAAU,KAAKA,YAGjDW,EAAQF,EAAQC,SAAS,KAAKT,WACrBG,WAAa,KAAKL,SAAW,KAAKA,UAC1CY,EAAMN,YAAYC,SAAS,IAAIR,EAAJ,QAAW,KAAKC,SAAU,KAAKA,WAKtDa,KAAAA,WAAWD,OAIHf,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;;AC9BAqB,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAnCf,IAAA,EAAA,EAAA,QAAA,uDACA,EAAA,EAAA,QAAA,WAkCeA,SAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,WAAAA,EAAAA,CAAAA,QAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,WAAAA,EAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,oBAAAA,SAAAA,QAAAA,IAAAA,QAAAA,IAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,IAAAA,EAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,OAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,MAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,IAAAA,QAAAA,EAAAA,EAAAA,MAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAhCTA,IAAAA,EAgCSA,SAAAA,GA/BqC,SAAA,IAAA,IAAA,EAAvCC,EAAKC,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EAAQnB,EAAW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIoB,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAG,OAAA,EAAA,KAAA,IAClD,EAAA,EAAA,KAAA,EAAA,GAAA,KAAA,QACKC,OAAS,IAAIvB,EAAJ,QAAWoB,EAAGI,OAASJ,EAAGK,WAAYL,EAAGM,QAAUN,EAAGO,aAC/DC,EAAAA,OAAS,EAAKL,OAAOM,OAAO,IAAI7B,EAAJ,QAAW,EAAE,IACzCU,EAAAA,OAAS,IAAIV,EAAJ,QAAW,EAAG,GACvB8B,EAAAA,WAAa,IAAI9B,EAAJ,QAAW,EAAG,GAC3BC,EAAAA,SAAW,GACXC,EAAAA,SAAWA,EACXoB,EAAAA,MAAQA,EACbF,EAAGW,iBAAiB,YAAa,EAAKC,OAAOC,KAA7C,EAAA,EAAA,MATkD,EA+BrCd,OAAAA,EAAAA,EAhC6BrB,EAAAA,SAgC7BqB,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAnBPV,MAAAA,SAAAA,GACH,KAAKV,SAASkB,YAAc,KAAKM,OAAON,YAAc,KAAKK,OACxDR,KAAAA,WAAW,KAAKgB,YAEjBI,KAAAA,wBAAwB,KAAKxB,QAClC,EAAA,EAAA,EAAA,WAAA,SAAA,MAAA,KAAA,MACKoB,KAAAA,WAAa,IAAI9B,EAAJ,QAAW,EAAG,KAanBmB,CAAAA,IAAAA,SANPgB,MAAAA,SAAAA,GACAC,IAAAA,EAAQ,IAAIpC,EAAJ,QAAWmC,EAAEE,EAAGF,EAAEG,GAC3BR,KAAAA,WAAaM,EAAMxB,SAAS,KAAKgB,UAIzBT,CAAAA,IAAAA,QAVF,IAAA,WACJ,OAAA,EAAI,KAAKpB,SAASkB,YAAc,KAAKM,OAAON,gBAStCE,EAAAA,GAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;;ACkLAoB,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAhNf,IAAMC,EAAN,4tHAqIMC,EAAN,62BA6BA,SAASF,EAASG,GAEbC,IAAAA,EAAiB,CACpBC,KAAM,CAACC,MAAM,GACbC,OAAQ,CAACD,MAAOH,EAAOI,QACvBC,cAAe,CAACF,MAAOH,EAAOK,eAC9BC,eAAgB,CAACH,MAAOH,EAAOM,gBAC/BC,UAAW,CAACJ,MAAOH,EAAOO,WAC1BC,mBAAoB,CAACL,MAAOH,EAAOQ,qBAGhCC,EAAQ,IAAI9B,EAAO+B,MAAMC,OAAM,GAC/BC,EAAW,IAAIjC,EAAO+B,MAAMG,eAAe,CAC9CC,SAAUb,EACVc,WAAW,EACXjB,aAAAA,EACAC,eAAAA,EACAiB,aAAa,IAGVC,EAAW,IAAItC,EAAO+B,MAAMQ,oBAAqB,IAAK,IAAK,GAAI,IAG/DC,EAAQ,IAAIxC,EAAO+B,MAAMU,KAC5BH,EACAL,GAmBMO,OAhBPA,EAAME,SAAS1B,GAAK2B,KAAKC,GAAG,EAC5BJ,EAAM9D,SAASmE,IAAI,EAAG,EAAG,GAazBC,sBAXSC,SAAAA,IACRd,EAASE,SAAT,KAA0BX,MAAQM,EAAMkB,iBAExCf,EAASE,SAAT,OAA4BX,MAAQH,EAAOI,OAC3CQ,EAASE,SAAT,cAAmCX,MAAQH,EAAOK,cAClDO,EAASE,SAAT,eAAoCX,MAAQH,EAAOM,eACnDM,EAASE,SAAT,UAA+BX,MAAQH,EAAOO,UAC9CK,EAASE,SAAT,mBAAwCX,MAAQH,EAAOQ,mBACvDiB,sBAAsBC,KAKhBP,EAEOtB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;;AChDf,IAAA,EAAA,UAAA,GAhKA,EAAA,EAAA,QAAA,wEAEA,EAAA,EAAA,QAAA,YA8JA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3JM+B,IAAAA,EA2JN,WA9FgB,SAAA,IAAA,EAAA,KAAA,GAGRC,IAAAA,EAASC,SAASC,cAAc,UACpCD,SAASE,KAAKC,QAAQJ,GACjBA,KAAAA,OAASA,EACdC,SAASE,KAAKC,QAAQJ,GACtBA,EAAOK,MAAMpD,MAAM,QACnB+C,EAAOK,MAAMlD,OAAO,QACpB6C,EAAOK,MAAM7E,SAAS,QACtBwE,EAAOK,MAAMC,IAAI,EACjBN,EAAOK,MAAME,KAAK,EAClBP,EAAOK,MAAMG,QAAS,EAGjBC,KAAAA,oBA+ET,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,oBAzJsB,MAAA,WAEZC,IAAAA,EAAQ5D,EAAOI,WACfyD,EAAS7D,EAAOM,YAKjBwD,KAAAA,SAAW,IAAI9D,EAAO+B,MAAMgC,cAAe,CAC9CC,WAAU,EACVC,OAAO,EACPf,OAAQ,KAAKA,SAGV7B,KAAAA,OAAS,CACfI,QAAQ,EACRC,cAAe,GACfG,mBAAoB,EACpBF,eAAgB,GAChBC,UAAW,EACXsC,SAAU,IACVC,KAAM,EACNC,MAAO,IAGDN,KAAAA,SAASO,cAAcrE,EAAOsE,kBAC9BR,KAAAA,SAASS,QAAQX,EAAOC,GAExBW,KAAAA,OAAS,IAAIxE,EAAO+B,MAAM0C,kBAtBnB,GAsB0Cb,EAAMC,EAxB/C,KACD,KAwBZ7D,EAAOwE,OAAS,KAAKA,OAEhBE,KAAAA,WAAa,IAAI1E,EAAO+B,MAAM4C,WAAW,UAGzCC,KAAAA,MAAQ,IAAI5E,EAAO+B,MAAM8C,MACzBD,KAAAA,MAAM5F,IAAI,KAAKwF,QAIfE,KAAAA,WAAWhG,SAASmE,IAAI,EAAE,IAAI,KAC9B2B,KAAAA,OAAO9F,SAASmE,KAAK,iBAAkB,mBAAoB,mBAC3D2B,KAAAA,OAAO9B,SAASG,KAAK,mBAAqB,mBAAqB,oBAG/DiC,KAAAA,UAAY,IAAIhF,EAAJ,QACd0C,KAAAA,OAAQ,EAAS,EAAA,SAAA,KAAKnB,QAK3B8B,SAASE,KAAKE,MAAMwB,WADD,QAEdjB,KAAAA,SAASkB,cAFK,SAIdlB,KAAAA,SAASmB,WAAW1B,MAAM2B,WAAa,SACrCC,KAAAA,SACFC,KAAAA,qBAkGP,EAAA,EAAA,CAAA,CAAA,IAAA,eA5EiB,MAAA,WACVN,KAAAA,UAAUO,SACVhE,KAAAA,OAAOM,eAAsD,EAArCgB,KAAK2C,IAAI,KAAKR,UAAUtD,MAAQ,GACxDsC,KAAAA,SAASyB,OAAO,KAAKX,MAAO,KAAKJ,QACtC1B,sBAAsB,KAAK0C,aAAa5E,KAAK,SAwE/C,CAAA,IAAA,SArEW,MAAA,WACT6E,QAAQC,IAAI,gBAGP5B,KAAAA,SAASmB,WAAW1B,MAAM2B,WAAa,GAGvCpB,KAAAA,SAASmB,WAAWvE,iBAAiB,aAAc,SAAAiF,GAAMA,OAAAA,EAAGC,mBAG5DhB,KAAAA,MAAM5F,IAAI,KAAKwD,OACpBM,sBAAsB,KAAK0C,aAAa5E,KAAK,SA0D/C,CAAA,IAAA,iBAvDyE,MAAA,WAAxDT,IAAAA,EAAQH,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EAAOI,WAAYC,EAASL,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EAAOM,YACrDkE,KAAAA,OAAOqB,OAAS1F,EAAQE,EACxBmE,KAAAA,OAAOsB,yBACPhC,KAAAA,SAASS,QAASpE,EAAOE,OAoDhC,EAAA,GA/CI0F,EAAmB,WAEjBC,IAAAA,EAAY,GACZC,GAAU,EAGLC,SAAAA,IACFD,IACHA,GAAU,EAENjG,EAAO8C,sBACT9C,EAAO8C,sBAAsBqD,GAE7BC,WAAWD,EAAc,KAMtBA,SAAAA,IACPH,EAAUK,QAAQ,SAASC,GACzBA,MAGFL,GAAU,EAUL,MAAA,CAELjH,IAAK,SAASsH,GACPN,EAAUO,QACbvG,EAAOU,iBAAiB,SAAUwF,GAV/BM,SAAYF,GACfA,GACFN,EAAUS,KAAKH,GAUfE,CAAYF,KAxCK,GA+CvBnD,SAASzC,iBAAiB,mBAAoB,WACxCgG,IAAAA,EAAK,IAAIzD,EACb8C,EAAgB/G,IAAI,WAClB0H,EAAGtB","file":"sombrero.714a2af1.map","sourceRoot":"..","sourcesContent":["exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","import Victor from 'victor';\n\nclass EulerIntegratedObject {\n\tconstructor(position = new Victor(0,0), maxForce = 0.08, maxSpeed = 6) {\n\t\tthis.position = position;\n\t\tthis.velocity = new Victor(0, 0);\n\t\tthis.acceleration = new Victor(0, 0);\n\t\tthis.maxForce = maxForce;\n\t\tthis.maxSpeed = maxSpeed;\n\t}\n\n\tupdate() {\n\t\tthis.velocity.add(this.acceleration);\n\n\t\tif(this.velocity.lengthSq() > this.maxSpeed * this.maxSpeed) {\n\t\t\tthis.velocity.normalize().multiply(new Victor(this.maxSpeed, this.maxSpeed))\n\t\t}\n\n\t\tthis.position.add(this.velocity);\n\t\tthis.acceleration.multiply(new Victor(0, 0));\n\t}\n\n\tapplyForce(force) {\n\t\tthis.acceleration.add(force);\n\t}\n\n\tseek(target) {\n\t\tlet desired = target.subtract(this.position);\n\t\tdesired.normalize();\n\t\tdesired.multiply(new Victor(this.maxSpeed, this.maxSpeed));\n\t\tlet steer = desired.subtract(this.velocity);\n\n\t\tif(steer.lengthSq() > this.maxForce * this.maxForce) {\n\t\t\tsteer.normalize().multiply(new Victor(this.maxForce, this.maxForce))\n\t\t}\n\n\t\tthis.applyForce(steer);\n\t}\n\n\tseekWithArrivalBehavior(target, distance = 200) {\n\t\tlet steer;\n\t\tlet desired = target.subtract(this.position);\n\t\tlet d = desired.magnitude();\n\n\t\tdesired.normalize();\n\n\t\tif (d < distance) {\n\t\t\t//let arriveSpeed = map(d, 0, 200, 0, this.maxSpeed); //\n\t\t\tlet arriveSpeed = (this.maxSpeed/distance) * d;\n\t\t\tdesired.multiply(new Victor(arriveSpeed, arriveSpeed));\n\t\t} else {\n\t\t\tdesired.multiply(new Victor(this.maxSpeed, this.maxSpeed));\n\t\t}\n\n\t\tsteer = desired.subtract(this.velocity);\n\t\tif(steer.lengthSq() > this.maxForce * this.maxForce) {\n\t\t\tsteer.normalize().multiply(new Victor(this.maxForce, this.maxForce))\n\t\t}\n\n\n\n\t\tthis.applyForce(steer);\n\t}\n}\n\nexport default EulerIntegratedObject;\n","import EulerIntegratedObject from \"../euler-integrated-object/euler-integrated-object\";\nimport Victor from \"victor\";\n\nclass MousePositionTimeDifferencial extends EulerIntegratedObject {\n\tconstructor(el = global, maxSpeed = 64, limit = 4) {\n\t\tsuper();\n\t\tthis.bounds = new Victor(el.width || el.innerWidth, el.height || el.innerHeight);\n\t\tthis.center = this.bounds.divide(new Victor(2,2));\n\t\tthis.target = new Victor(0, 0);\n\t\tthis.mouseForce = new Victor(0, 0);\n\t\tthis.maxForce = 10;\n\t\tthis.maxSpeed = maxSpeed;\n\t\tthis.limit = limit;\n\t\tel.addEventListener('mousemove', this.onMove.bind(this));\n\t}\n\n\tupdate(force) {\n\t\tif(this.position.magnitude() < this.bounds.magnitude() * this.limit) {\n\t\t\tthis.applyForce(this.mouseForce);\n\t\t}\n\t\tthis.seekWithArrivalBehavior(this.target);\n\t\tsuper.update();\n\t\tthis.mouseForce = new Victor(0, 0);\n\t}\n\n\tget value() {\n\t\treturn 1 + this.position.magnitude() / this.bounds.magnitude();\n\t}\n\n\tonMove(e) {\n\t\tconst mouse = new Victor(e.x, e.y);\n\t\tthis.mouseForce = mouse.subtract(this.center);\n\t}\n}\n\nexport default MousePositionTimeDifferencial;\n","// import {Clock} from 'three/src/core/Clock';\n// import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\n// import {Mesh} from 'three/src/objects/Mesh';\n\nconst vertexShader = `\nvarying float zDisplacement;\nvarying float distanceToCenter;\nuniform float time;\nuniform bool noised;\nuniform float waveAmplitude;\nuniform float noiseAmplitude;\nuniform float timeScale;\nuniform float waveAmplitudeScale;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\nvoid main() {\n\tfloat scaledTime = time * timeScale;\n\tvec3 p = position;\n\tvec3 center = vec3(0.5);\n\tfloat d = distance(center, position);\n\tdistanceToCenter = d / 200.0;\n\tfloat zDis = sin(scaledTime + d * 3.1416 / 100.0);\n\tfloat noise = snoise(vec3(position.x, position.y, scaledTime ));\n\n\tif(noised) {\n\t\tp.z += waveAmplitude * zDis * waveAmplitudeScale + noise * noiseAmplitude;\n\t} else {\n\t\tp.z += waveAmplitude * zDis * waveAmplitudeScale ;\n\t}\n\tzDisplacement = zDis;\n\n\tvec4 modelViewPosition = modelViewMatrix * vec4(p, 1.0);\n\tgl_Position = projectionMatrix * modelViewPosition;\n}\n\n`;\nconst fragmentShader = `\nvarying float zDisplacement;\nvarying float distanceToCenter;\n\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvoid main(void)\t{\n\tfloat h = map(zDisplacement, 0.0, 1.0, 0.3, 0.5);\n\tvec3 color = vec3(1.0);\n\tvec3 p = mix(color, vec3(0.0), distanceToCenter);\n\tgl_FragColor  = vec4(p, 0.4);\n}\n`;\n\n\nfunction getFloor(params /*= { noised: false, waveAmplitude: 10, noisedWaveAmplitude: 20, noiseAmplitude: 15, timeScale: 1, noisedTimeScale: 4 }*/) {\n\n\tlet customUniforms = {\n\t\ttime: {value:0},\n\t\tnoised: {value: params.noised},\n\t\twaveAmplitude: {value: params.waveAmplitude},\n\t\tnoiseAmplitude: {value: params.noiseAmplitude},\n\t\ttimeScale: {value: params.timeScale},\n\t\twaveAmplitudeScale: {value: params.waveAmplitudeScale}\n\t};\n\n\tlet clock = new global.THREE.Clock(true);\n\tlet material = new global.THREE.ShaderMaterial({\n\t\tuniforms: customUniforms,\n\t\twireframe: true,\n\t\tvertexShader,\n\t\tfragmentShader,\n\t\ttransparent: true\n\t});\n\n\tlet geometry = new global.THREE.PlaneBufferGeometry( 500, 500, 64, 64)\n\n\n\tvar floor = new global.THREE.Mesh(\n\t\tgeometry,\n\t\tmaterial\n\t);\n\n\tfloor.rotation.x = -Math.PI/2;\n\tfloor.position.set(0, 0, 0);\n\n\tfunction updateFloor() {\n\t\tmaterial.uniforms['time'].value = clock.getElapsedTime();\n\n\t\tmaterial.uniforms['noised'].value = params.noised;\n\t\tmaterial.uniforms['waveAmplitude'].value = params.waveAmplitude;\n\t\tmaterial.uniforms['noiseAmplitude'].value = params.noiseAmplitude;\n\t\tmaterial.uniforms['timeScale'].value = params.timeScale;\n\t\tmaterial.uniforms['waveAmplitudeScale'].value = params.waveAmplitudeScale;\n\t\trequestAnimationFrame(updateFloor)\n\t}\n\n\trequestAnimationFrame(updateFloor)\n\n\treturn floor\n}\nexport default getFloor;\n","\n// import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\n// import {PerspectiveCamera} from 'three/src/cameras/PerspectiveCamera';\n// import {PointLight} from 'three/src/lights/PointLight';\n// import {Scene} from 'three/src/scenes/Scene';\nimport MousePositionTimeDifferencial from \"./mouse-position-time-differencial/mouse-position-time-differencial\";\n\nimport getFloor from \"./floor\";\n\n\nclass Background {\n\n  componentDidMount() {\n  \n    const WIDTH = global.innerWidth;\n    const HEIGHT = global.innerHeight;\n    const NEAR = 0.005;\n    const FAR = 10000;\n    const FOV = 45;\n    \n    this.renderer = new global.THREE.WebGLRenderer( {\n      antialias:true,\n      alpha: true,\n      canvas: this.canvas\n    } );\n\n    this.params = {\n\t\t\tnoised: true,\n\t\t\twaveAmplitude: 10, //20\n\t\t\twaveAmplitudeScale: 1,\n\t\t\tnoiseAmplitude: 15,\n\t\t\ttimeScale: 1, //4\n\t\t\tprogress: 100,\n\t\t\tbars: 8,\n\t\t\tscale: ''\n\t\t};\n  \n    this.renderer.setPixelRatio(global.devidePixelRatio)\n    this.renderer.setSize(WIDTH, HEIGHT);\n  \n    this.camera = new global.THREE.PerspectiveCamera(FOV, WIDTH/HEIGHT, NEAR, FAR);\n    global.camera = this.camera;\n  \n    this.pointLight = new global.THREE.PointLight(0xFFFFFF);\n  \n  \n    this.scene = new global.THREE.Scene();\n    this.scene.add(this.camera);\n    //scene.add(new Sombrero(renderer, camera, scene));\n    \n  \n    this.pointLight.position.set(0,400,400);\n    this.camera.position.set(-295.487136558543, 103.03964239226575, 172.3230048464714);\n    this.camera.rotation.set(-0.5389069437879402, -0.9739710596848878, -0.45929780344672005);\n  \n\n    this.mouseDiff = new MousePositionTimeDifferencial();\n\t\tthis.floor = getFloor(this.params);\n\n\n    // Set background color\n\t\tconst background = 'black';\n\t\tdocument.body.style.background = background;\n\t\tthis.renderer.setClearColor(background);\n\t\t// Hide canvas\n\t\tthis.renderer.domElement.style.visibility = 'hidden';\n    this.onload();\n\t\tthis.onWindowResize();\n\n  }\n  \n  constructor() {\n    \n    \n    let canvas = document.createElement('canvas');\n    document.body.prepend(canvas)\n    this.canvas = canvas;\n    document.body.prepend(canvas)\n    canvas.style.width=\"100vw\"\n    canvas.style.height=\"100vh\"\n    canvas.style.position=\"fixed\";\n    canvas.style.top=0;\n    canvas.style.left=0;\n    canvas.style.zIndex= -1;\n\n\n    this.componentDidMount()\n  }\n\n  onEnterFrame() {\n\t\tthis.mouseDiff.update();\n\t\tthis.params.noiseAmplitude = Math.abs(this.mouseDiff.value - 1) * 5;\n\t\tthis.renderer.render(this.scene, this.camera);\n\t\trequestAnimationFrame(this.onEnterFrame.bind(this));\n\t}\n\n  onload() {\n\t\tconsole.log('Done loading');\n\n\t\t// Show canvas\n\t\tthis.renderer.domElement.style.visibility = '';\n\n\t\t// To avoid page pulling and such\n\t\tthis.renderer.domElement.addEventListener('touchstart', ev => ev.preventDefault());\n\n\t\t//this.bufferScene.add(this.floor);\n\t\tthis.scene.add(this.floor);\n\t\trequestAnimationFrame(this.onEnterFrame.bind(this));\n  }\n  \n  onWindowResize(width = global.innerWidth, height = global.innerHeight) {\n\t\tthis.camera.aspect = width / height;\n\t\tthis.camera.updateProjectionMatrix();\n\t\tthis.renderer.setSize( width, height );\n\t}\n\n}\n\nvar optimizedResize = (function() {\n\n  var callbacks = [],\n      running = false;\n\n  // fired on resize event\n  function resize() {\n    if (!running) {\n      running = true;\n\n      if (global.requestAnimationFrame) {\n        global.requestAnimationFrame(runCallbacks);\n      } else {\n        setTimeout(runCallbacks, 66);\n      }\n    }\n  }\n\n  // run the actual callbacks\n  function runCallbacks() {\n    callbacks.forEach(function(callback) {\n      callback();\n    });\n\n    running = false;\n  }\n\n  // adds callback to loop\n  function addCallback(callback) {\n    if (callback) {\n      callbacks.push(callback);\n    }\n  }\n\n  return {\n    // public method to add additional callback\n    add: function(callback) {\n      if (!callbacks.length) {\n        global.addEventListener('resize', resize);\n      }\n      addCallback(callback);\n    }\n  }\n\n}());\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  let bg = new Background();\n  optimizedResize.add(function() {\n    bg.onWindowResize()\n  });\n})"]}